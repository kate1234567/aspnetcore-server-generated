/*
 * Movie Library
 *
 * Это пример сервиса управления фильмами, реализованного на основе спецификации OpenAPI 3.0. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MovieControllerApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Получение списка всех фильмов в библиотеке</remarks>
        /// <response code="200">Список фильмов</response>
        [HttpGet]
        [Route("/allMovies")]
        [ValidateModelState]
        [SwaggerOperation("AllMoviesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Movie>), description: "Список фильмов")]
        public virtual IActionResult AllMoviesGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Movie>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"duration\" : 6,\n  \"releaseDate\" : \"2000-01-23\",\n  \"director\" : \"director\",\n  \"genre\" : \"genre\",\n  \"id\" : 0,\n  \"title\" : \"title\"\n}, {\n  \"duration\" : 6,\n  \"releaseDate\" : \"2000-01-23\",\n  \"director\" : \"director\",\n  \"genre\" : \"genre\",\n  \"id\" : 0,\n  \"title\" : \"title\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Movie>>(exampleJson)
                        : default(List<Movie>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Удаление фильма по идентификатору</remarks>
        /// <param name="movieId"></param>
        /// <response code="200">Фильм успешно удалён</response>
        /// <response code="500">Ошибка при удалении фильма</response>
        [HttpDelete]
        [Route("/movie/{movieId}")]
        [ValidateModelState]
        [SwaggerOperation("MovieMovieIdDelete")]
        public virtual IActionResult MovieMovieIdDelete([FromRoute][Required]int? movieId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Получение фильма по идентификатору</remarks>
        /// <param name="movieId"></param>
        /// <response code="200">Фильм с указанным идентификатором</response>
        [HttpGet]
        [Route("/movie/{movieId}")]
        [ValidateModelState]
        [SwaggerOperation("MovieMovieIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Movie), description: "Фильм с указанным идентификатором")]
        public virtual IActionResult MovieMovieIdGet([FromRoute][Required]int? movieId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Movie));
            string exampleJson = null;
            exampleJson = "{\n  \"duration\" : 6,\n  \"releaseDate\" : \"2000-01-23\",\n  \"director\" : \"director\",\n  \"genre\" : \"genre\",\n  \"id\" : 0,\n  \"title\" : \"title\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Movie>(exampleJson)
                        : default(Movie);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Частичное обновление данных фильма по идентификатору</remarks>
        /// <param name="body"></param>
        /// <param name="movieId"></param>
        /// <response code="200">Данные фильма успешно обновлены</response>
        /// <response code="400">Некорректные данные для обновления</response>
        /// <response code="404">Фильм не найден</response>
        /// <response code="500">Ошибка при обновлении данных фильма</response>
        [HttpPatch]
        [Route("/movie/{movieId}")]
        [ValidateModelState]
        [SwaggerOperation("MovieMovieIdPatch")]
        public virtual IActionResult MovieMovieIdPatch([FromBody]MoviePartialUpdate body, [FromRoute][Required]int? movieId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Получение списка фильмов с пагинацией</remarks>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        /// <response code="200">Список фильмов</response>
        [HttpGet]
        [Route("/movies")]
        [ValidateModelState]
        [SwaggerOperation("MoviesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Movie>), description: "Список фильмов")]
        public virtual IActionResult MoviesGet([FromQuery]int? page, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Movie>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"duration\" : 6,\n  \"releaseDate\" : \"2000-01-23\",\n  \"director\" : \"director\",\n  \"genre\" : \"genre\",\n  \"id\" : 0,\n  \"title\" : \"title\"\n}, {\n  \"duration\" : 6,\n  \"releaseDate\" : \"2000-01-23\",\n  \"director\" : \"director\",\n  \"genre\" : \"genre\",\n  \"id\" : 0,\n  \"title\" : \"title\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Movie>>(exampleJson)
                        : default(List<Movie>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Добавление нового фильма в библиотеку</remarks>
        /// <param name="body"></param>
        /// <response code="200">Фильм успешно добавлен</response>
        /// <response code="500">Ошибка при добавлении фильма</response>
        [HttpPost]
        [Route("/movies")]
        [ValidateModelState]
        [SwaggerOperation("MoviesPost")]
        public virtual IActionResult MoviesPost([FromBody]Movie body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Обновление данных фильма</remarks>
        /// <param name="body"></param>
        /// <response code="200">Фильм успешно обновлён</response>
        /// <response code="500">Ошибка при обновлении фильма</response>
        [HttpPut]
        [Route("/movies")]
        [ValidateModelState]
        [SwaggerOperation("MoviesPut")]
        public virtual IActionResult MoviesPut([FromBody]Movie body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }
    }
}
